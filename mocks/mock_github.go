// Code generated by MockGen. DO NOT EDIT.
// Source: github.go
//
// Generated by this command:
//
//	mockgen -typed -source=github.go -destination=../mocks/mock_github.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	github "go-kweb-lang/github"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGitHub is a mock of GitHub interface.
type MockGitHub struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubMockRecorder
	isgomock struct{}
}

// MockGitHubMockRecorder is the mock recorder for MockGitHub.
type MockGitHubMockRecorder struct {
	mock *MockGitHub
}

// NewMockGitHub creates a new mock instance.
func NewMockGitHub(ctrl *gomock.Controller) *MockGitHub {
	mock := &MockGitHub{ctrl: ctrl}
	mock.recorder = &MockGitHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHub) EXPECT() *MockGitHubMockRecorder {
	return m.recorder
}

// GetCommitFiles mocks base method.
func (m *MockGitHub) GetCommitFiles(ctx context.Context, commitID string) (*github.CommitFiles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitFiles", ctx, commitID)
	ret0, _ := ret[0].(*github.CommitFiles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitFiles indicates an expected call of GetCommitFiles.
func (mr *MockGitHubMockRecorder) GetCommitFiles(ctx, commitID any) *MockGitHubGetCommitFilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitFiles", reflect.TypeOf((*MockGitHub)(nil).GetCommitFiles), ctx, commitID)
	return &MockGitHubGetCommitFilesCall{Call: call}
}

// MockGitHubGetCommitFilesCall wrap *gomock.Call
type MockGitHubGetCommitFilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitHubGetCommitFilesCall) Return(arg0 *github.CommitFiles, arg1 error) *MockGitHubGetCommitFilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitHubGetCommitFilesCall) Do(f func(context.Context, string) (*github.CommitFiles, error)) *MockGitHubGetCommitFilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitHubGetCommitFilesCall) DoAndReturn(f func(context.Context, string) (*github.CommitFiles, error)) *MockGitHubGetCommitFilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLatestCommit mocks base method.
func (m *MockGitHub) GetLatestCommit(ctx context.Context) (*github.CommitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestCommit", ctx)
	ret0, _ := ret[0].(*github.CommitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestCommit indicates an expected call of GetLatestCommit.
func (mr *MockGitHubMockRecorder) GetLatestCommit(ctx any) *MockGitHubGetLatestCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestCommit", reflect.TypeOf((*MockGitHub)(nil).GetLatestCommit), ctx)
	return &MockGitHubGetLatestCommitCall{Call: call}
}

// MockGitHubGetLatestCommitCall wrap *gomock.Call
type MockGitHubGetLatestCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitHubGetLatestCommitCall) Return(arg0 *github.CommitInfo, arg1 error) *MockGitHubGetLatestCommitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitHubGetLatestCommitCall) Do(f func(context.Context) (*github.CommitInfo, error)) *MockGitHubGetLatestCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitHubGetLatestCommitCall) DoAndReturn(f func(context.Context) (*github.CommitInfo, error)) *MockGitHubGetLatestCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPRCommits mocks base method.
func (m *MockGitHub) GetPRCommits(ctx context.Context, prNumber int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPRCommits", ctx, prNumber)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPRCommits indicates an expected call of GetPRCommits.
func (mr *MockGitHubMockRecorder) GetPRCommits(ctx, prNumber any) *MockGitHubGetPRCommitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPRCommits", reflect.TypeOf((*MockGitHub)(nil).GetPRCommits), ctx, prNumber)
	return &MockGitHubGetPRCommitsCall{Call: call}
}

// MockGitHubGetPRCommitsCall wrap *gomock.Call
type MockGitHubGetPRCommitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitHubGetPRCommitsCall) Return(arg0 []string, arg1 error) *MockGitHubGetPRCommitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitHubGetPRCommitsCall) Do(f func(context.Context, int) ([]string, error)) *MockGitHubGetPRCommitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitHubGetPRCommitsCall) DoAndReturn(f func(context.Context, int) ([]string, error)) *MockGitHubGetPRCommitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PRSearch mocks base method.
func (m *MockGitHub) PRSearch(ctx context.Context, filter github.PRSearchFilter, page github.PageRequest) (*github.PRSearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PRSearch", ctx, filter, page)
	ret0, _ := ret[0].(*github.PRSearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PRSearch indicates an expected call of PRSearch.
func (mr *MockGitHubMockRecorder) PRSearch(ctx, filter, page any) *MockGitHubPRSearchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PRSearch", reflect.TypeOf((*MockGitHub)(nil).PRSearch), ctx, filter, page)
	return &MockGitHubPRSearchCall{Call: call}
}

// MockGitHubPRSearchCall wrap *gomock.Call
type MockGitHubPRSearchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitHubPRSearchCall) Return(arg0 *github.PRSearchResult, arg1 error) *MockGitHubPRSearchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitHubPRSearchCall) Do(f func(context.Context, github.PRSearchFilter, github.PageRequest) (*github.PRSearchResult, error)) *MockGitHubPRSearchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitHubPRSearchCall) DoAndReturn(f func(context.Context, github.PRSearchFilter, github.PageRequest) (*github.PRSearchResult, error)) *MockGitHubPRSearchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

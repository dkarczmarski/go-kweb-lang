// Code generated by MockGen. DO NOT EDIT.
// Source: githist.go
//
// Generated by this command:
//
//	mockgen -typed -source=githist.go -destination=../mocks/mock_githist.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInvalidator is a mock of Invalidator interface.
type MockInvalidator struct {
	ctrl     *gomock.Controller
	recorder *MockInvalidatorMockRecorder
	isgomock struct{}
}

// MockInvalidatorMockRecorder is the mock recorder for MockInvalidator.
type MockInvalidatorMockRecorder struct {
	mock *MockInvalidator
}

// NewMockInvalidator creates a new mock instance.
func NewMockInvalidator(ctrl *gomock.Controller) *MockInvalidator {
	mock := &MockInvalidator{ctrl: ctrl}
	mock.recorder = &MockInvalidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvalidator) EXPECT() *MockInvalidatorMockRecorder {
	return m.recorder
}

// InvalidateFiles mocks base method.
func (m *MockInvalidator) InvalidateFiles(paths []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateFiles", paths)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateFiles indicates an expected call of InvalidateFiles.
func (mr *MockInvalidatorMockRecorder) InvalidateFiles(paths any) *MockInvalidatorInvalidateFilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateFiles", reflect.TypeOf((*MockInvalidator)(nil).InvalidateFiles), paths)
	return &MockInvalidatorInvalidateFilesCall{Call: call}
}

// MockInvalidatorInvalidateFilesCall wrap *gomock.Call
type MockInvalidatorInvalidateFilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInvalidatorInvalidateFilesCall) Return(arg0 error) *MockInvalidatorInvalidateFilesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInvalidatorInvalidateFilesCall) Do(f func([]string) error) *MockInvalidatorInvalidateFilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInvalidatorInvalidateFilesCall) DoAndReturn(f func([]string) error) *MockInvalidatorInvalidateFilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Code generated by MockGen. DO NOT EDIT.
// Source: git.go
//
// Generated by this command:
//
//	mockgen -typed -source=git.go -destination=../mocks/mock_git.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	git "go-kweb-lang/git"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
	isgomock struct{}
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// Checkout mocks base method.
func (m *MockRepo) Checkout(ctx context.Context, commitID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", ctx, commitID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout.
func (mr *MockRepoMockRecorder) Checkout(ctx, commitID any) *MockRepoCheckoutCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockRepo)(nil).Checkout), ctx, commitID)
	return &MockRepoCheckoutCall{Call: call}
}

// MockRepoCheckoutCall wrap *gomock.Call
type MockRepoCheckoutCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepoCheckoutCall) Return(arg0 error) *MockRepoCheckoutCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepoCheckoutCall) Do(f func(context.Context, string) error) *MockRepoCheckoutCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepoCheckoutCall) DoAndReturn(f func(context.Context, string) error) *MockRepoCheckoutCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockRepo) Create(ctx context.Context, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepoMockRecorder) Create(ctx, url any) *MockRepoCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepo)(nil).Create), ctx, url)
	return &MockRepoCreateCall{Call: call}
}

// MockRepoCreateCall wrap *gomock.Call
type MockRepoCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepoCreateCall) Return(arg0 error) *MockRepoCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepoCreateCall) Do(f func(context.Context, string) error) *MockRepoCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepoCreateCall) DoAndReturn(f func(context.Context, string) error) *MockRepoCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Fetch mocks base method.
func (m *MockRepo) Fetch(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch.
func (mr *MockRepoMockRecorder) Fetch(ctx any) *MockRepoFetchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockRepo)(nil).Fetch), ctx)
	return &MockRepoFetchCall{Call: call}
}

// MockRepoFetchCall wrap *gomock.Call
type MockRepoFetchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepoFetchCall) Return(arg0 error) *MockRepoFetchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepoFetchCall) Do(f func(context.Context) error) *MockRepoFetchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepoFetchCall) DoAndReturn(f func(context.Context) error) *MockRepoFetchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FileExists mocks base method.
func (m *MockRepo) FileExists(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileExists", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileExists indicates an expected call of FileExists.
func (mr *MockRepoMockRecorder) FileExists(path any) *MockRepoFileExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileExists", reflect.TypeOf((*MockRepo)(nil).FileExists), path)
	return &MockRepoFileExistsCall{Call: call}
}

// MockRepoFileExistsCall wrap *gomock.Call
type MockRepoFileExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepoFileExistsCall) Return(arg0 bool, arg1 error) *MockRepoFileExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepoFileExistsCall) Do(f func(string) (bool, error)) *MockRepoFileExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepoFileExistsCall) DoAndReturn(f func(string) (bool, error)) *MockRepoFileExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindFileCommitsAfter mocks base method.
func (m *MockRepo) FindFileCommitsAfter(ctx context.Context, path, commitIDFrom string) ([]git.CommitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFileCommitsAfter", ctx, path, commitIDFrom)
	ret0, _ := ret[0].([]git.CommitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFileCommitsAfter indicates an expected call of FindFileCommitsAfter.
func (mr *MockRepoMockRecorder) FindFileCommitsAfter(ctx, path, commitIDFrom any) *MockRepoFindFileCommitsAfterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFileCommitsAfter", reflect.TypeOf((*MockRepo)(nil).FindFileCommitsAfter), ctx, path, commitIDFrom)
	return &MockRepoFindFileCommitsAfterCall{Call: call}
}

// MockRepoFindFileCommitsAfterCall wrap *gomock.Call
type MockRepoFindFileCommitsAfterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepoFindFileCommitsAfterCall) Return(arg0 []git.CommitInfo, arg1 error) *MockRepoFindFileCommitsAfterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepoFindFileCommitsAfterCall) Do(f func(context.Context, string, string) ([]git.CommitInfo, error)) *MockRepoFindFileCommitsAfterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepoFindFileCommitsAfterCall) DoAndReturn(f func(context.Context, string, string) ([]git.CommitInfo, error)) *MockRepoFindFileCommitsAfterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindFileLastCommit mocks base method.
func (m *MockRepo) FindFileLastCommit(ctx context.Context, path string) (git.CommitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFileLastCommit", ctx, path)
	ret0, _ := ret[0].(git.CommitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFileLastCommit indicates an expected call of FindFileLastCommit.
func (mr *MockRepoMockRecorder) FindFileLastCommit(ctx, path any) *MockRepoFindFileLastCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFileLastCommit", reflect.TypeOf((*MockRepo)(nil).FindFileLastCommit), ctx, path)
	return &MockRepoFindFileLastCommitCall{Call: call}
}

// MockRepoFindFileLastCommitCall wrap *gomock.Call
type MockRepoFindFileLastCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepoFindFileLastCommitCall) Return(arg0 git.CommitInfo, arg1 error) *MockRepoFindFileLastCommitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepoFindFileLastCommitCall) Do(f func(context.Context, string) (git.CommitInfo, error)) *MockRepoFindFileLastCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepoFindFileLastCommitCall) DoAndReturn(f func(context.Context, string) (git.CommitInfo, error)) *MockRepoFindFileLastCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAncestorCommits mocks base method.
func (m *MockRepo) ListAncestorCommits(ctx context.Context, commitID string) ([]git.CommitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAncestorCommits", ctx, commitID)
	ret0, _ := ret[0].([]git.CommitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAncestorCommits indicates an expected call of ListAncestorCommits.
func (mr *MockRepoMockRecorder) ListAncestorCommits(ctx, commitID any) *MockRepoListAncestorCommitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAncestorCommits", reflect.TypeOf((*MockRepo)(nil).ListAncestorCommits), ctx, commitID)
	return &MockRepoListAncestorCommitsCall{Call: call}
}

// MockRepoListAncestorCommitsCall wrap *gomock.Call
type MockRepoListAncestorCommitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepoListAncestorCommitsCall) Return(arg0 []git.CommitInfo, arg1 error) *MockRepoListAncestorCommitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepoListAncestorCommitsCall) Do(f func(context.Context, string) ([]git.CommitInfo, error)) *MockRepoListAncestorCommitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepoListAncestorCommitsCall) DoAndReturn(f func(context.Context, string) ([]git.CommitInfo, error)) *MockRepoListAncestorCommitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListCommitParents mocks base method.
func (m *MockRepo) ListCommitParents(ctx context.Context, commitID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommitParents", ctx, commitID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommitParents indicates an expected call of ListCommitParents.
func (mr *MockRepoMockRecorder) ListCommitParents(ctx, commitID any) *MockRepoListCommitParentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommitParents", reflect.TypeOf((*MockRepo)(nil).ListCommitParents), ctx, commitID)
	return &MockRepoListCommitParentsCall{Call: call}
}

// MockRepoListCommitParentsCall wrap *gomock.Call
type MockRepoListCommitParentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepoListCommitParentsCall) Return(arg0 []string, arg1 error) *MockRepoListCommitParentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepoListCommitParentsCall) Do(f func(context.Context, string) ([]string, error)) *MockRepoListCommitParentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepoListCommitParentsCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockRepoListCommitParentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListFiles mocks base method.
func (m *MockRepo) ListFiles(path string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", path)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockRepoMockRecorder) ListFiles(path any) *MockRepoListFilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockRepo)(nil).ListFiles), path)
	return &MockRepoListFilesCall{Call: call}
}

// MockRepoListFilesCall wrap *gomock.Call
type MockRepoListFilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepoListFilesCall) Return(arg0 []string, arg1 error) *MockRepoListFilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepoListFilesCall) Do(f func(string) ([]string, error)) *MockRepoListFilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepoListFilesCall) DoAndReturn(f func(string) ([]string, error)) *MockRepoListFilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListFilesBetweenCommits mocks base method.
func (m *MockRepo) ListFilesBetweenCommits(ctx context.Context, forkCommitID, branchLastCommitID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilesBetweenCommits", ctx, forkCommitID, branchLastCommitID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesBetweenCommits indicates an expected call of ListFilesBetweenCommits.
func (mr *MockRepoMockRecorder) ListFilesBetweenCommits(ctx, forkCommitID, branchLastCommitID any) *MockRepoListFilesBetweenCommitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesBetweenCommits", reflect.TypeOf((*MockRepo)(nil).ListFilesBetweenCommits), ctx, forkCommitID, branchLastCommitID)
	return &MockRepoListFilesBetweenCommitsCall{Call: call}
}

// MockRepoListFilesBetweenCommitsCall wrap *gomock.Call
type MockRepoListFilesBetweenCommitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepoListFilesBetweenCommitsCall) Return(arg0 []string, arg1 error) *MockRepoListFilesBetweenCommitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepoListFilesBetweenCommitsCall) Do(f func(context.Context, string, string) ([]string, error)) *MockRepoListFilesBetweenCommitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepoListFilesBetweenCommitsCall) DoAndReturn(f func(context.Context, string, string) ([]string, error)) *MockRepoListFilesBetweenCommitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListFilesInCommit mocks base method.
func (m *MockRepo) ListFilesInCommit(ctx context.Context, commitID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilesInCommit", ctx, commitID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesInCommit indicates an expected call of ListFilesInCommit.
func (mr *MockRepoMockRecorder) ListFilesInCommit(ctx, commitID any) *MockRepoListFilesInCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesInCommit", reflect.TypeOf((*MockRepo)(nil).ListFilesInCommit), ctx, commitID)
	return &MockRepoListFilesInCommitCall{Call: call}
}

// MockRepoListFilesInCommitCall wrap *gomock.Call
type MockRepoListFilesInCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepoListFilesInCommitCall) Return(arg0 []string, arg1 error) *MockRepoListFilesInCommitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepoListFilesInCommitCall) Do(f func(context.Context, string) ([]string, error)) *MockRepoListFilesInCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepoListFilesInCommitCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockRepoListFilesInCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListFreshCommits mocks base method.
func (m *MockRepo) ListFreshCommits(ctx context.Context) ([]git.CommitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFreshCommits", ctx)
	ret0, _ := ret[0].([]git.CommitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFreshCommits indicates an expected call of ListFreshCommits.
func (mr *MockRepoMockRecorder) ListFreshCommits(ctx any) *MockRepoListFreshCommitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFreshCommits", reflect.TypeOf((*MockRepo)(nil).ListFreshCommits), ctx)
	return &MockRepoListFreshCommitsCall{Call: call}
}

// MockRepoListFreshCommitsCall wrap *gomock.Call
type MockRepoListFreshCommitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepoListFreshCommitsCall) Return(arg0 []git.CommitInfo, arg1 error) *MockRepoListFreshCommitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepoListFreshCommitsCall) Do(f func(context.Context) ([]git.CommitInfo, error)) *MockRepoListFreshCommitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepoListFreshCommitsCall) DoAndReturn(f func(context.Context) ([]git.CommitInfo, error)) *MockRepoListFreshCommitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListMainBranchCommits mocks base method.
func (m *MockRepo) ListMainBranchCommits(ctx context.Context) ([]git.CommitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMainBranchCommits", ctx)
	ret0, _ := ret[0].([]git.CommitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMainBranchCommits indicates an expected call of ListMainBranchCommits.
func (mr *MockRepoMockRecorder) ListMainBranchCommits(ctx any) *MockRepoListMainBranchCommitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMainBranchCommits", reflect.TypeOf((*MockRepo)(nil).ListMainBranchCommits), ctx)
	return &MockRepoListMainBranchCommitsCall{Call: call}
}

// MockRepoListMainBranchCommitsCall wrap *gomock.Call
type MockRepoListMainBranchCommitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepoListMainBranchCommitsCall) Return(arg0 []git.CommitInfo, arg1 error) *MockRepoListMainBranchCommitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepoListMainBranchCommitsCall) Do(f func(context.Context) ([]git.CommitInfo, error)) *MockRepoListMainBranchCommitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepoListMainBranchCommitsCall) DoAndReturn(f func(context.Context) ([]git.CommitInfo, error)) *MockRepoListMainBranchCommitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListMergePoints mocks base method.
func (m *MockRepo) ListMergePoints(ctx context.Context, commitID string) ([]git.CommitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMergePoints", ctx, commitID)
	ret0, _ := ret[0].([]git.CommitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMergePoints indicates an expected call of ListMergePoints.
func (mr *MockRepoMockRecorder) ListMergePoints(ctx, commitID any) *MockRepoListMergePointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMergePoints", reflect.TypeOf((*MockRepo)(nil).ListMergePoints), ctx, commitID)
	return &MockRepoListMergePointsCall{Call: call}
}

// MockRepoListMergePointsCall wrap *gomock.Call
type MockRepoListMergePointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepoListMergePointsCall) Return(arg0 []git.CommitInfo, arg1 error) *MockRepoListMergePointsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepoListMergePointsCall) Do(f func(context.Context, string) ([]git.CommitInfo, error)) *MockRepoListMergePointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepoListMergePointsCall) DoAndReturn(f func(context.Context, string) ([]git.CommitInfo, error)) *MockRepoListMergePointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Pull mocks base method.
func (m *MockRepo) Pull(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pull indicates an expected call of Pull.
func (mr *MockRepoMockRecorder) Pull(ctx any) *MockRepoPullCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockRepo)(nil).Pull), ctx)
	return &MockRepoPullCall{Call: call}
}

// MockRepoPullCall wrap *gomock.Call
type MockRepoPullCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepoPullCall) Return(arg0 error) *MockRepoPullCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepoPullCall) Do(f func(context.Context) error) *MockRepoPullCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepoPullCall) DoAndReturn(f func(context.Context) error) *MockRepoPullCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

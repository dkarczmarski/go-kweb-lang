// Code generated by MockGen. DO NOT EDIT.
// Source: github_monitor.go
//
// Generated by this command:
//
//	mockgen -typed -source=github_monitor.go -destination=../mocks/mock_github_monitor.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLangProvider is a mock of LangProvider interface.
type MockLangProvider struct {
	ctrl     *gomock.Controller
	recorder *MockLangProviderMockRecorder
	isgomock struct{}
}

// MockLangProviderMockRecorder is the mock recorder for MockLangProvider.
type MockLangProviderMockRecorder struct {
	mock *MockLangProvider
}

// NewMockLangProvider creates a new mock instance.
func NewMockLangProvider(ctrl *gomock.Controller) *MockLangProvider {
	mock := &MockLangProvider{ctrl: ctrl}
	mock.recorder = &MockLangProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLangProvider) EXPECT() *MockLangProviderMockRecorder {
	return m.recorder
}

// LangCodes mocks base method.
func (m *MockLangProvider) LangCodes() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LangCodes")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LangCodes indicates an expected call of LangCodes.
func (mr *MockLangProviderMockRecorder) LangCodes() *MockLangProviderLangCodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LangCodes", reflect.TypeOf((*MockLangProvider)(nil).LangCodes))
	return &MockLangProviderLangCodesCall{Call: call}
}

// MockLangProviderLangCodesCall wrap *gomock.Call
type MockLangProviderLangCodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLangProviderLangCodesCall) Return(arg0 []string, arg1 error) *MockLangProviderLangCodesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLangProviderLangCodesCall) Do(f func() ([]string, error)) *MockLangProviderLangCodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLangProviderLangCodesCall) DoAndReturn(f func() ([]string, error)) *MockLangProviderLangCodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMonitorStorage is a mock of MonitorStorage interface.
type MockMonitorStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorStorageMockRecorder
	isgomock struct{}
}

// MockMonitorStorageMockRecorder is the mock recorder for MockMonitorStorage.
type MockMonitorStorageMockRecorder struct {
	mock *MockMonitorStorage
}

// NewMockMonitorStorage creates a new mock instance.
func NewMockMonitorStorage(ctrl *gomock.Controller) *MockMonitorStorage {
	mock := &MockMonitorStorage{ctrl: ctrl}
	mock.recorder = &MockMonitorStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitorStorage) EXPECT() *MockMonitorStorageMockRecorder {
	return m.recorder
}

// ReadLastPRUpdatedAt mocks base method.
func (m *MockMonitorStorage) ReadLastPRUpdatedAt(langCode string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLastPRUpdatedAt", langCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLastPRUpdatedAt indicates an expected call of ReadLastPRUpdatedAt.
func (mr *MockMonitorStorageMockRecorder) ReadLastPRUpdatedAt(langCode any) *MockMonitorStorageReadLastPRUpdatedAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLastPRUpdatedAt", reflect.TypeOf((*MockMonitorStorage)(nil).ReadLastPRUpdatedAt), langCode)
	return &MockMonitorStorageReadLastPRUpdatedAtCall{Call: call}
}

// MockMonitorStorageReadLastPRUpdatedAtCall wrap *gomock.Call
type MockMonitorStorageReadLastPRUpdatedAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMonitorStorageReadLastPRUpdatedAtCall) Return(arg0 string, arg1 error) *MockMonitorStorageReadLastPRUpdatedAtCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMonitorStorageReadLastPRUpdatedAtCall) Do(f func(string) (string, error)) *MockMonitorStorageReadLastPRUpdatedAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMonitorStorageReadLastPRUpdatedAtCall) DoAndReturn(f func(string) (string, error)) *MockMonitorStorageReadLastPRUpdatedAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadLastRepoUpdatedAt mocks base method.
func (m *MockMonitorStorage) ReadLastRepoUpdatedAt() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLastRepoUpdatedAt")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLastRepoUpdatedAt indicates an expected call of ReadLastRepoUpdatedAt.
func (mr *MockMonitorStorageMockRecorder) ReadLastRepoUpdatedAt() *MockMonitorStorageReadLastRepoUpdatedAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLastRepoUpdatedAt", reflect.TypeOf((*MockMonitorStorage)(nil).ReadLastRepoUpdatedAt))
	return &MockMonitorStorageReadLastRepoUpdatedAtCall{Call: call}
}

// MockMonitorStorageReadLastRepoUpdatedAtCall wrap *gomock.Call
type MockMonitorStorageReadLastRepoUpdatedAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMonitorStorageReadLastRepoUpdatedAtCall) Return(arg0 string, arg1 error) *MockMonitorStorageReadLastRepoUpdatedAtCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMonitorStorageReadLastRepoUpdatedAtCall) Do(f func() (string, error)) *MockMonitorStorageReadLastRepoUpdatedAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMonitorStorageReadLastRepoUpdatedAtCall) DoAndReturn(f func() (string, error)) *MockMonitorStorageReadLastRepoUpdatedAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteLastPRUpdatedAt mocks base method.
func (m *MockMonitorStorage) WriteLastPRUpdatedAt(langCode, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLastPRUpdatedAt", langCode, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLastPRUpdatedAt indicates an expected call of WriteLastPRUpdatedAt.
func (mr *MockMonitorStorageMockRecorder) WriteLastPRUpdatedAt(langCode, value any) *MockMonitorStorageWriteLastPRUpdatedAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLastPRUpdatedAt", reflect.TypeOf((*MockMonitorStorage)(nil).WriteLastPRUpdatedAt), langCode, value)
	return &MockMonitorStorageWriteLastPRUpdatedAtCall{Call: call}
}

// MockMonitorStorageWriteLastPRUpdatedAtCall wrap *gomock.Call
type MockMonitorStorageWriteLastPRUpdatedAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMonitorStorageWriteLastPRUpdatedAtCall) Return(arg0 error) *MockMonitorStorageWriteLastPRUpdatedAtCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMonitorStorageWriteLastPRUpdatedAtCall) Do(f func(string, string) error) *MockMonitorStorageWriteLastPRUpdatedAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMonitorStorageWriteLastPRUpdatedAtCall) DoAndReturn(f func(string, string) error) *MockMonitorStorageWriteLastPRUpdatedAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteLastRepoUpdatedAt mocks base method.
func (m *MockMonitorStorage) WriteLastRepoUpdatedAt(value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLastRepoUpdatedAt", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLastRepoUpdatedAt indicates an expected call of WriteLastRepoUpdatedAt.
func (mr *MockMonitorStorageMockRecorder) WriteLastRepoUpdatedAt(value any) *MockMonitorStorageWriteLastRepoUpdatedAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLastRepoUpdatedAt", reflect.TypeOf((*MockMonitorStorage)(nil).WriteLastRepoUpdatedAt), value)
	return &MockMonitorStorageWriteLastRepoUpdatedAtCall{Call: call}
}

// MockMonitorStorageWriteLastRepoUpdatedAtCall wrap *gomock.Call
type MockMonitorStorageWriteLastRepoUpdatedAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMonitorStorageWriteLastRepoUpdatedAtCall) Return(arg0 error) *MockMonitorStorageWriteLastRepoUpdatedAtCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMonitorStorageWriteLastRepoUpdatedAtCall) Do(f func(string) error) *MockMonitorStorageWriteLastRepoUpdatedAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMonitorStorageWriteLastRepoUpdatedAtCall) DoAndReturn(f func(string) error) *MockMonitorStorageWriteLastRepoUpdatedAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMonitorTask is a mock of MonitorTask interface.
type MockMonitorTask struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorTaskMockRecorder
	isgomock struct{}
}

// MockMonitorTaskMockRecorder is the mock recorder for MockMonitorTask.
type MockMonitorTaskMockRecorder struct {
	mock *MockMonitorTask
}

// NewMockMonitorTask creates a new mock instance.
func NewMockMonitorTask(ctrl *gomock.Controller) *MockMonitorTask {
	mock := &MockMonitorTask{ctrl: ctrl}
	mock.recorder = &MockMonitorTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitorTask) EXPECT() *MockMonitorTaskMockRecorder {
	return m.recorder
}

// OnUpdate mocks base method.
func (m *MockMonitorTask) OnUpdate(ctx context.Context, repoUpdated bool, prUpdatedLangCodes []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnUpdate", ctx, repoUpdated, prUpdatedLangCodes)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnUpdate indicates an expected call of OnUpdate.
func (mr *MockMonitorTaskMockRecorder) OnUpdate(ctx, repoUpdated, prUpdatedLangCodes any) *MockMonitorTaskOnUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnUpdate", reflect.TypeOf((*MockMonitorTask)(nil).OnUpdate), ctx, repoUpdated, prUpdatedLangCodes)
	return &MockMonitorTaskOnUpdateCall{Call: call}
}

// MockMonitorTaskOnUpdateCall wrap *gomock.Call
type MockMonitorTaskOnUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMonitorTaskOnUpdateCall) Return(arg0 error) *MockMonitorTaskOnUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMonitorTaskOnUpdateCall) Do(f func(context.Context, bool, []string) error) *MockMonitorTaskOnUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMonitorTaskOnUpdateCall) DoAndReturn(f func(context.Context, bool, []string) error) *MockMonitorTaskOnUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Code generated by MockGen. DO NOT EDIT.
// Source: pullreq.go
//
// Generated by this command:
//
//	mockgen -typed -source=pullreq.go -destination=../mocks/mock_pullreq.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFilePRFinderStorage is a mock of FilePRFinderStorage interface.
type MockFilePRFinderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockFilePRFinderStorageMockRecorder
	isgomock struct{}
}

// MockFilePRFinderStorageMockRecorder is the mock recorder for MockFilePRFinderStorage.
type MockFilePRFinderStorageMockRecorder struct {
	mock *MockFilePRFinderStorage
}

// NewMockFilePRFinderStorage creates a new mock instance.
func NewMockFilePRFinderStorage(ctrl *gomock.Controller) *MockFilePRFinderStorage {
	mock := &MockFilePRFinderStorage{ctrl: ctrl}
	mock.recorder = &MockFilePRFinderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilePRFinderStorage) EXPECT() *MockFilePRFinderStorageMockRecorder {
	return m.recorder
}

// LangIndex mocks base method.
func (m *MockFilePRFinderStorage) LangIndex(langCode string) (map[string][]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LangIndex", langCode)
	ret0, _ := ret[0].(map[string][]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LangIndex indicates an expected call of LangIndex.
func (mr *MockFilePRFinderStorageMockRecorder) LangIndex(langCode any) *MockFilePRFinderStorageLangIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LangIndex", reflect.TypeOf((*MockFilePRFinderStorage)(nil).LangIndex), langCode)
	return &MockFilePRFinderStorageLangIndexCall{Call: call}
}

// MockFilePRFinderStorageLangIndexCall wrap *gomock.Call
type MockFilePRFinderStorageLangIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFilePRFinderStorageLangIndexCall) Return(arg0 map[string][]int, arg1 error) *MockFilePRFinderStorageLangIndexCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFilePRFinderStorageLangIndexCall) Do(f func(string) (map[string][]int, error)) *MockFilePRFinderStorageLangIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFilePRFinderStorageLangIndexCall) DoAndReturn(f func(string) (map[string][]int, error)) *MockFilePRFinderStorageLangIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StoreLangIndex mocks base method.
func (m *MockFilePRFinderStorage) StoreLangIndex(langCode string, filePRs map[string][]int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreLangIndex", langCode, filePRs)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLangIndex indicates an expected call of StoreLangIndex.
func (mr *MockFilePRFinderStorageMockRecorder) StoreLangIndex(langCode, filePRs any) *MockFilePRFinderStorageStoreLangIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLangIndex", reflect.TypeOf((*MockFilePRFinderStorage)(nil).StoreLangIndex), langCode, filePRs)
	return &MockFilePRFinderStorageStoreLangIndexCall{Call: call}
}

// MockFilePRFinderStorageStoreLangIndexCall wrap *gomock.Call
type MockFilePRFinderStorageStoreLangIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFilePRFinderStorageStoreLangIndexCall) Return(arg0 error) *MockFilePRFinderStorageStoreLangIndexCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFilePRFinderStorageStoreLangIndexCall) Do(f func(string, map[string][]int) error) *MockFilePRFinderStorageStoreLangIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFilePRFinderStorageStoreLangIndexCall) DoAndReturn(f func(string, map[string][]int) error) *MockFilePRFinderStorageStoreLangIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

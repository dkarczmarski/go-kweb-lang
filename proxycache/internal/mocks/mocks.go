// Code generated by MockGen. DO NOT EDIT.
// Source: proxycache.go
//
// Generated by this command:
//
//	mockgen -typed -source=proxycache.go -destination=./internal/mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockStore) Read(bucket, key string, buff any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", bucket, key, buff)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockStoreMockRecorder) Read(bucket, key, buff any) *MockStoreReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStore)(nil).Read), bucket, key, buff)
	return &MockStoreReadCall{Call: call}
}

// MockStoreReadCall wrap *gomock.Call
type MockStoreReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreReadCall) Return(arg0 bool, arg1 error) *MockStoreReadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreReadCall) Do(f func(string, string, any) (bool, error)) *MockStoreReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreReadCall) DoAndReturn(f func(string, string, any) (bool, error)) *MockStoreReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockStore) Write(bucket, key string, data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", bucket, key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockStoreMockRecorder) Write(bucket, key, data any) *MockStoreWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStore)(nil).Write), bucket, key, data)
	return &MockStoreWriteCall{Call: call}
}

// MockStoreWriteCall wrap *gomock.Call
type MockStoreWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreWriteCall) Return(arg0 error) *MockStoreWriteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreWriteCall) Do(f func(string, string, any) error) *MockStoreWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreWriteCall) DoAndReturn(f func(string, string, any) error) *MockStoreWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

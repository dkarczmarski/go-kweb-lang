// Code generated by MockGen. DO NOT EDIT.
// Source: githubmon.go
//
// Generated by this command:
//
//	mockgen -typed -source=githubmon.go -destination=./internal/mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	github "go-kweb-lang/github"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGitHub is a mock of GitHub interface.
type MockGitHub struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubMockRecorder
	isgomock struct{}
}

// MockGitHubMockRecorder is the mock recorder for MockGitHub.
type MockGitHubMockRecorder struct {
	mock *MockGitHub
}

// NewMockGitHub creates a new mock instance.
func NewMockGitHub(ctrl *gomock.Controller) *MockGitHub {
	mock := &MockGitHub{ctrl: ctrl}
	mock.recorder = &MockGitHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHub) EXPECT() *MockGitHubMockRecorder {
	return m.recorder
}

// GetLatestCommit mocks base method.
func (m *MockGitHub) GetLatestCommit(ctx context.Context) (*github.CommitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestCommit", ctx)
	ret0, _ := ret[0].(*github.CommitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestCommit indicates an expected call of GetLatestCommit.
func (mr *MockGitHubMockRecorder) GetLatestCommit(ctx any) *MockGitHubGetLatestCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestCommit", reflect.TypeOf((*MockGitHub)(nil).GetLatestCommit), ctx)
	return &MockGitHubGetLatestCommitCall{Call: call}
}

// MockGitHubGetLatestCommitCall wrap *gomock.Call
type MockGitHubGetLatestCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitHubGetLatestCommitCall) Return(arg0 *github.CommitInfo, arg1 error) *MockGitHubGetLatestCommitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitHubGetLatestCommitCall) Do(f func(context.Context) (*github.CommitInfo, error)) *MockGitHubGetLatestCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitHubGetLatestCommitCall) DoAndReturn(f func(context.Context) (*github.CommitInfo, error)) *MockGitHubGetLatestCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PRSearch mocks base method.
func (m *MockGitHub) PRSearch(ctx context.Context, filter github.PRSearchFilter, page github.PageRequest) (*github.PRSearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PRSearch", ctx, filter, page)
	ret0, _ := ret[0].(*github.PRSearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PRSearch indicates an expected call of PRSearch.
func (mr *MockGitHubMockRecorder) PRSearch(ctx, filter, page any) *MockGitHubPRSearchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PRSearch", reflect.TypeOf((*MockGitHub)(nil).PRSearch), ctx, filter, page)
	return &MockGitHubPRSearchCall{Call: call}
}

// MockGitHubPRSearchCall wrap *gomock.Call
type MockGitHubPRSearchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitHubPRSearchCall) Return(arg0 *github.PRSearchResult, arg1 error) *MockGitHubPRSearchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitHubPRSearchCall) Do(f func(context.Context, github.PRSearchFilter, github.PageRequest) (*github.PRSearchResult, error)) *MockGitHubPRSearchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitHubPRSearchCall) DoAndReturn(f func(context.Context, github.PRSearchFilter, github.PageRequest) (*github.PRSearchResult, error)) *MockGitHubPRSearchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLangProvider is a mock of LangProvider interface.
type MockLangProvider struct {
	ctrl     *gomock.Controller
	recorder *MockLangProviderMockRecorder
	isgomock struct{}
}

// MockLangProviderMockRecorder is the mock recorder for MockLangProvider.
type MockLangProviderMockRecorder struct {
	mock *MockLangProvider
}

// NewMockLangProvider creates a new mock instance.
func NewMockLangProvider(ctrl *gomock.Controller) *MockLangProvider {
	mock := &MockLangProvider{ctrl: ctrl}
	mock.recorder = &MockLangProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLangProvider) EXPECT() *MockLangProviderMockRecorder {
	return m.recorder
}

// LangCodes mocks base method.
func (m *MockLangProvider) LangCodes() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LangCodes")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LangCodes indicates an expected call of LangCodes.
func (mr *MockLangProviderMockRecorder) LangCodes() *MockLangProviderLangCodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LangCodes", reflect.TypeOf((*MockLangProvider)(nil).LangCodes))
	return &MockLangProviderLangCodesCall{Call: call}
}

// MockLangProviderLangCodesCall wrap *gomock.Call
type MockLangProviderLangCodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLangProviderLangCodesCall) Return(arg0 []string, arg1 error) *MockLangProviderLangCodesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLangProviderLangCodesCall) Do(f func() ([]string, error)) *MockLangProviderLangCodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLangProviderLangCodesCall) DoAndReturn(f func() ([]string, error)) *MockLangProviderLangCodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMonitorStorage is a mock of MonitorStorage interface.
type MockMonitorStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorStorageMockRecorder
	isgomock struct{}
}

// MockMonitorStorageMockRecorder is the mock recorder for MockMonitorStorage.
type MockMonitorStorageMockRecorder struct {
	mock *MockMonitorStorage
}

// NewMockMonitorStorage creates a new mock instance.
func NewMockMonitorStorage(ctrl *gomock.Controller) *MockMonitorStorage {
	mock := &MockMonitorStorage{ctrl: ctrl}
	mock.recorder = &MockMonitorStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitorStorage) EXPECT() *MockMonitorStorageMockRecorder {
	return m.recorder
}

// ReadLastPRUpdatedAt mocks base method.
func (m *MockMonitorStorage) ReadLastPRUpdatedAt(langCode string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLastPRUpdatedAt", langCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLastPRUpdatedAt indicates an expected call of ReadLastPRUpdatedAt.
func (mr *MockMonitorStorageMockRecorder) ReadLastPRUpdatedAt(langCode any) *MockMonitorStorageReadLastPRUpdatedAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLastPRUpdatedAt", reflect.TypeOf((*MockMonitorStorage)(nil).ReadLastPRUpdatedAt), langCode)
	return &MockMonitorStorageReadLastPRUpdatedAtCall{Call: call}
}

// MockMonitorStorageReadLastPRUpdatedAtCall wrap *gomock.Call
type MockMonitorStorageReadLastPRUpdatedAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMonitorStorageReadLastPRUpdatedAtCall) Return(arg0 string, arg1 error) *MockMonitorStorageReadLastPRUpdatedAtCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMonitorStorageReadLastPRUpdatedAtCall) Do(f func(string) (string, error)) *MockMonitorStorageReadLastPRUpdatedAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMonitorStorageReadLastPRUpdatedAtCall) DoAndReturn(f func(string) (string, error)) *MockMonitorStorageReadLastPRUpdatedAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadLastRepoUpdatedAt mocks base method.
func (m *MockMonitorStorage) ReadLastRepoUpdatedAt() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLastRepoUpdatedAt")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLastRepoUpdatedAt indicates an expected call of ReadLastRepoUpdatedAt.
func (mr *MockMonitorStorageMockRecorder) ReadLastRepoUpdatedAt() *MockMonitorStorageReadLastRepoUpdatedAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLastRepoUpdatedAt", reflect.TypeOf((*MockMonitorStorage)(nil).ReadLastRepoUpdatedAt))
	return &MockMonitorStorageReadLastRepoUpdatedAtCall{Call: call}
}

// MockMonitorStorageReadLastRepoUpdatedAtCall wrap *gomock.Call
type MockMonitorStorageReadLastRepoUpdatedAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMonitorStorageReadLastRepoUpdatedAtCall) Return(arg0 string, arg1 error) *MockMonitorStorageReadLastRepoUpdatedAtCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMonitorStorageReadLastRepoUpdatedAtCall) Do(f func() (string, error)) *MockMonitorStorageReadLastRepoUpdatedAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMonitorStorageReadLastRepoUpdatedAtCall) DoAndReturn(f func() (string, error)) *MockMonitorStorageReadLastRepoUpdatedAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteLastPRUpdatedAt mocks base method.
func (m *MockMonitorStorage) WriteLastPRUpdatedAt(langCode, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLastPRUpdatedAt", langCode, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLastPRUpdatedAt indicates an expected call of WriteLastPRUpdatedAt.
func (mr *MockMonitorStorageMockRecorder) WriteLastPRUpdatedAt(langCode, value any) *MockMonitorStorageWriteLastPRUpdatedAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLastPRUpdatedAt", reflect.TypeOf((*MockMonitorStorage)(nil).WriteLastPRUpdatedAt), langCode, value)
	return &MockMonitorStorageWriteLastPRUpdatedAtCall{Call: call}
}

// MockMonitorStorageWriteLastPRUpdatedAtCall wrap *gomock.Call
type MockMonitorStorageWriteLastPRUpdatedAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMonitorStorageWriteLastPRUpdatedAtCall) Return(arg0 error) *MockMonitorStorageWriteLastPRUpdatedAtCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMonitorStorageWriteLastPRUpdatedAtCall) Do(f func(string, string) error) *MockMonitorStorageWriteLastPRUpdatedAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMonitorStorageWriteLastPRUpdatedAtCall) DoAndReturn(f func(string, string) error) *MockMonitorStorageWriteLastPRUpdatedAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteLastRepoUpdatedAt mocks base method.
func (m *MockMonitorStorage) WriteLastRepoUpdatedAt(value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLastRepoUpdatedAt", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLastRepoUpdatedAt indicates an expected call of WriteLastRepoUpdatedAt.
func (mr *MockMonitorStorageMockRecorder) WriteLastRepoUpdatedAt(value any) *MockMonitorStorageWriteLastRepoUpdatedAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLastRepoUpdatedAt", reflect.TypeOf((*MockMonitorStorage)(nil).WriteLastRepoUpdatedAt), value)
	return &MockMonitorStorageWriteLastRepoUpdatedAtCall{Call: call}
}

// MockMonitorStorageWriteLastRepoUpdatedAtCall wrap *gomock.Call
type MockMonitorStorageWriteLastRepoUpdatedAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMonitorStorageWriteLastRepoUpdatedAtCall) Return(arg0 error) *MockMonitorStorageWriteLastRepoUpdatedAtCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMonitorStorageWriteLastRepoUpdatedAtCall) Do(f func(string) error) *MockMonitorStorageWriteLastRepoUpdatedAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMonitorStorageWriteLastRepoUpdatedAtCall) DoAndReturn(f func(string) error) *MockMonitorStorageWriteLastRepoUpdatedAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockOnUpdateTask is a mock of OnUpdateTask interface.
type MockOnUpdateTask struct {
	ctrl     *gomock.Controller
	recorder *MockOnUpdateTaskMockRecorder
	isgomock struct{}
}

// MockOnUpdateTaskMockRecorder is the mock recorder for MockOnUpdateTask.
type MockOnUpdateTaskMockRecorder struct {
	mock *MockOnUpdateTask
}

// NewMockOnUpdateTask creates a new mock instance.
func NewMockOnUpdateTask(ctrl *gomock.Controller) *MockOnUpdateTask {
	mock := &MockOnUpdateTask{ctrl: ctrl}
	mock.recorder = &MockOnUpdateTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOnUpdateTask) EXPECT() *MockOnUpdateTaskMockRecorder {
	return m.recorder
}

// OnUpdate mocks base method.
func (m *MockOnUpdateTask) OnUpdate(ctx context.Context, repoUpdated bool, prUpdatedLangCodes []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnUpdate", ctx, repoUpdated, prUpdatedLangCodes)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnUpdate indicates an expected call of OnUpdate.
func (mr *MockOnUpdateTaskMockRecorder) OnUpdate(ctx, repoUpdated, prUpdatedLangCodes any) *MockOnUpdateTaskOnUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnUpdate", reflect.TypeOf((*MockOnUpdateTask)(nil).OnUpdate), ctx, repoUpdated, prUpdatedLangCodes)
	return &MockOnUpdateTaskOnUpdateCall{Call: call}
}

// MockOnUpdateTaskOnUpdateCall wrap *gomock.Call
type MockOnUpdateTaskOnUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOnUpdateTaskOnUpdateCall) Return(arg0 error) *MockOnUpdateTaskOnUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOnUpdateTaskOnUpdateCall) Do(f func(context.Context, bool, []string) error) *MockOnUpdateTaskOnUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOnUpdateTaskOnUpdateCall) DoAndReturn(f func(context.Context, bool, []string) error) *MockOnUpdateTaskOnUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCacheStore is a mock of CacheStore interface.
type MockCacheStore struct {
	ctrl     *gomock.Controller
	recorder *MockCacheStoreMockRecorder
	isgomock struct{}
}

// MockCacheStoreMockRecorder is the mock recorder for MockCacheStore.
type MockCacheStoreMockRecorder struct {
	mock *MockCacheStore
}

// NewMockCacheStore creates a new mock instance.
func NewMockCacheStore(ctrl *gomock.Controller) *MockCacheStore {
	mock := &MockCacheStore{ctrl: ctrl}
	mock.recorder = &MockCacheStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheStore) EXPECT() *MockCacheStoreMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockCacheStore) Read(bucket, key string, buff any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", bucket, key, buff)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockCacheStoreMockRecorder) Read(bucket, key, buff any) *MockCacheStoreReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCacheStore)(nil).Read), bucket, key, buff)
	return &MockCacheStoreReadCall{Call: call}
}

// MockCacheStoreReadCall wrap *gomock.Call
type MockCacheStoreReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCacheStoreReadCall) Return(arg0 bool, arg1 error) *MockCacheStoreReadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCacheStoreReadCall) Do(f func(string, string, any) (bool, error)) *MockCacheStoreReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCacheStoreReadCall) DoAndReturn(f func(string, string, any) (bool, error)) *MockCacheStoreReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockCacheStore) Write(bucket, key string, data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", bucket, key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockCacheStoreMockRecorder) Write(bucket, key, data any) *MockCacheStoreWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockCacheStore)(nil).Write), bucket, key, data)
	return &MockCacheStoreWriteCall{Call: call}
}

// MockCacheStoreWriteCall wrap *gomock.Call
type MockCacheStoreWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCacheStoreWriteCall) Return(arg0 error) *MockCacheStoreWriteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCacheStoreWriteCall) Do(f func(string, string, any) error) *MockCacheStoreWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCacheStoreWriteCall) DoAndReturn(f func(string, string, any) error) *MockCacheStoreWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

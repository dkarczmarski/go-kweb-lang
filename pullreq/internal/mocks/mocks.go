// Code generated by MockGen. DO NOT EDIT.
// Source: pullreq.go
//
// Generated by this command:
//
//	mockgen -typed -source=pullreq.go -destination=./internal/mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	github "go-kweb-lang/github"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGitHub is a mock of GitHub interface.
type MockGitHub struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubMockRecorder
	isgomock struct{}
}

// MockGitHubMockRecorder is the mock recorder for MockGitHub.
type MockGitHubMockRecorder struct {
	mock *MockGitHub
}

// NewMockGitHub creates a new mock instance.
func NewMockGitHub(ctrl *gomock.Controller) *MockGitHub {
	mock := &MockGitHub{ctrl: ctrl}
	mock.recorder = &MockGitHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHub) EXPECT() *MockGitHubMockRecorder {
	return m.recorder
}

// GetCommitFiles mocks base method.
func (m *MockGitHub) GetCommitFiles(ctx context.Context, commitID string) (*github.CommitFiles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitFiles", ctx, commitID)
	ret0, _ := ret[0].(*github.CommitFiles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitFiles indicates an expected call of GetCommitFiles.
func (mr *MockGitHubMockRecorder) GetCommitFiles(ctx, commitID any) *MockGitHubGetCommitFilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitFiles", reflect.TypeOf((*MockGitHub)(nil).GetCommitFiles), ctx, commitID)
	return &MockGitHubGetCommitFilesCall{Call: call}
}

// MockGitHubGetCommitFilesCall wrap *gomock.Call
type MockGitHubGetCommitFilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitHubGetCommitFilesCall) Return(arg0 *github.CommitFiles, arg1 error) *MockGitHubGetCommitFilesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitHubGetCommitFilesCall) Do(f func(context.Context, string) (*github.CommitFiles, error)) *MockGitHubGetCommitFilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitHubGetCommitFilesCall) DoAndReturn(f func(context.Context, string) (*github.CommitFiles, error)) *MockGitHubGetCommitFilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPRCommits mocks base method.
func (m *MockGitHub) GetPRCommits(ctx context.Context, prNumber int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPRCommits", ctx, prNumber)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPRCommits indicates an expected call of GetPRCommits.
func (mr *MockGitHubMockRecorder) GetPRCommits(ctx, prNumber any) *MockGitHubGetPRCommitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPRCommits", reflect.TypeOf((*MockGitHub)(nil).GetPRCommits), ctx, prNumber)
	return &MockGitHubGetPRCommitsCall{Call: call}
}

// MockGitHubGetPRCommitsCall wrap *gomock.Call
type MockGitHubGetPRCommitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitHubGetPRCommitsCall) Return(arg0 []string, arg1 error) *MockGitHubGetPRCommitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitHubGetPRCommitsCall) Do(f func(context.Context, int) ([]string, error)) *MockGitHubGetPRCommitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitHubGetPRCommitsCall) DoAndReturn(f func(context.Context, int) ([]string, error)) *MockGitHubGetPRCommitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PRSearch mocks base method.
func (m *MockGitHub) PRSearch(ctx context.Context, filter github.PRSearchFilter, page github.PageRequest) (*github.PRSearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PRSearch", ctx, filter, page)
	ret0, _ := ret[0].(*github.PRSearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PRSearch indicates an expected call of PRSearch.
func (mr *MockGitHubMockRecorder) PRSearch(ctx, filter, page any) *MockGitHubPRSearchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PRSearch", reflect.TypeOf((*MockGitHub)(nil).PRSearch), ctx, filter, page)
	return &MockGitHubPRSearchCall{Call: call}
}

// MockGitHubPRSearchCall wrap *gomock.Call
type MockGitHubPRSearchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitHubPRSearchCall) Return(arg0 *github.PRSearchResult, arg1 error) *MockGitHubPRSearchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitHubPRSearchCall) Do(f func(context.Context, github.PRSearchFilter, github.PageRequest) (*github.PRSearchResult, error)) *MockGitHubPRSearchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitHubPRSearchCall) DoAndReturn(f func(context.Context, github.PRSearchFilter, github.PageRequest) (*github.PRSearchResult, error)) *MockGitHubPRSearchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCacheStore is a mock of CacheStore interface.
type MockCacheStore struct {
	ctrl     *gomock.Controller
	recorder *MockCacheStoreMockRecorder
	isgomock struct{}
}

// MockCacheStoreMockRecorder is the mock recorder for MockCacheStore.
type MockCacheStoreMockRecorder struct {
	mock *MockCacheStore
}

// NewMockCacheStore creates a new mock instance.
func NewMockCacheStore(ctrl *gomock.Controller) *MockCacheStore {
	mock := &MockCacheStore{ctrl: ctrl}
	mock.recorder = &MockCacheStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheStore) EXPECT() *MockCacheStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCacheStore) Delete(bucket, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", bucket, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheStoreMockRecorder) Delete(bucket, key any) *MockCacheStoreDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacheStore)(nil).Delete), bucket, key)
	return &MockCacheStoreDeleteCall{Call: call}
}

// MockCacheStoreDeleteCall wrap *gomock.Call
type MockCacheStoreDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCacheStoreDeleteCall) Return(arg0 error) *MockCacheStoreDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCacheStoreDeleteCall) Do(f func(string, string) error) *MockCacheStoreDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCacheStoreDeleteCall) DoAndReturn(f func(string, string) error) *MockCacheStoreDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockCacheStore) Read(bucket, key string, buff any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", bucket, key, buff)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockCacheStoreMockRecorder) Read(bucket, key, buff any) *MockCacheStoreReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCacheStore)(nil).Read), bucket, key, buff)
	return &MockCacheStoreReadCall{Call: call}
}

// MockCacheStoreReadCall wrap *gomock.Call
type MockCacheStoreReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCacheStoreReadCall) Return(arg0 bool, arg1 error) *MockCacheStoreReadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCacheStoreReadCall) Do(f func(string, string, any) (bool, error)) *MockCacheStoreReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCacheStoreReadCall) DoAndReturn(f func(string, string, any) (bool, error)) *MockCacheStoreReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockCacheStore) Write(bucket, key string, data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", bucket, key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockCacheStoreMockRecorder) Write(bucket, key, data any) *MockCacheStoreWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockCacheStore)(nil).Write), bucket, key, data)
	return &MockCacheStoreWriteCall{Call: call}
}

// MockCacheStoreWriteCall wrap *gomock.Call
type MockCacheStoreWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCacheStoreWriteCall) Return(arg0 error) *MockCacheStoreWriteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCacheStoreWriteCall) Do(f func(string, string, any) error) *MockCacheStoreWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCacheStoreWriteCall) DoAndReturn(f func(string, string, any) error) *MockCacheStoreWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFilePRFinderStorage is a mock of FilePRFinderStorage interface.
type MockFilePRFinderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockFilePRFinderStorageMockRecorder
	isgomock struct{}
}

// MockFilePRFinderStorageMockRecorder is the mock recorder for MockFilePRFinderStorage.
type MockFilePRFinderStorageMockRecorder struct {
	mock *MockFilePRFinderStorage
}

// NewMockFilePRFinderStorage creates a new mock instance.
func NewMockFilePRFinderStorage(ctrl *gomock.Controller) *MockFilePRFinderStorage {
	mock := &MockFilePRFinderStorage{ctrl: ctrl}
	mock.recorder = &MockFilePRFinderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilePRFinderStorage) EXPECT() *MockFilePRFinderStorageMockRecorder {
	return m.recorder
}

// LangIndex mocks base method.
func (m *MockFilePRFinderStorage) LangIndex(langCode string) (map[string][]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LangIndex", langCode)
	ret0, _ := ret[0].(map[string][]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LangIndex indicates an expected call of LangIndex.
func (mr *MockFilePRFinderStorageMockRecorder) LangIndex(langCode any) *MockFilePRFinderStorageLangIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LangIndex", reflect.TypeOf((*MockFilePRFinderStorage)(nil).LangIndex), langCode)
	return &MockFilePRFinderStorageLangIndexCall{Call: call}
}

// MockFilePRFinderStorageLangIndexCall wrap *gomock.Call
type MockFilePRFinderStorageLangIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFilePRFinderStorageLangIndexCall) Return(arg0 map[string][]int, arg1 error) *MockFilePRFinderStorageLangIndexCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFilePRFinderStorageLangIndexCall) Do(f func(string) (map[string][]int, error)) *MockFilePRFinderStorageLangIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFilePRFinderStorageLangIndexCall) DoAndReturn(f func(string) (map[string][]int, error)) *MockFilePRFinderStorageLangIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StoreLangIndex mocks base method.
func (m *MockFilePRFinderStorage) StoreLangIndex(langCode string, filePRs map[string][]int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreLangIndex", langCode, filePRs)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLangIndex indicates an expected call of StoreLangIndex.
func (mr *MockFilePRFinderStorageMockRecorder) StoreLangIndex(langCode, filePRs any) *MockFilePRFinderStorageStoreLangIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLangIndex", reflect.TypeOf((*MockFilePRFinderStorage)(nil).StoreLangIndex), langCode, filePRs)
	return &MockFilePRFinderStorageStoreLangIndexCall{Call: call}
}

// MockFilePRFinderStorageStoreLangIndexCall wrap *gomock.Call
type MockFilePRFinderStorageStoreLangIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFilePRFinderStorageStoreLangIndexCall) Return(arg0 error) *MockFilePRFinderStorageStoreLangIndexCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFilePRFinderStorageStoreLangIndexCall) Do(f func(string, map[string][]int) error) *MockFilePRFinderStorageStoreLangIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFilePRFinderStorageStoreLangIndexCall) DoAndReturn(f func(string, map[string][]int) error) *MockFilePRFinderStorageStoreLangIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
